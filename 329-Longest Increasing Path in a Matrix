class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix==null || matrix.length==0 || matrix[0].length==0) return 0;
        int[][] cache = new int[matrix.length][matrix[0].length];
        int max = 0;
        for(int i =0; i<matrix.length; i++){
            for(int j=0; j<matrix[0].length; j++){
                max = Math.max(max, longestIncreasingPathAtCell(matrix, i, j, cache, Integer.MAX_VALUE));                
            }          
        }
        return max;
    }
    
    public int longestIncreasingPathAtCell(int[][] matrix, int i, int j, int[][] cache, int pre){
        if(i<0 || i>=matrix.length || j<0||j>=matrix[0].length|| matrix[i][j]>=pre) return 0;
        if(cache[i][j] ==0){
            int tempMax = 0;
            tempMax = Math.max(tempMax, longestIncreasingPathAtCell(matrix, i-1, j, cache, matrix[i][j]));
            tempMax = Math.max(tempMax, longestIncreasingPathAtCell(matrix, i+1, j, cache, matrix[i][j]));
            tempMax = Math.max(tempMax, longestIncreasingPathAtCell(matrix, i, j-1, cache, matrix[i][j]));
            tempMax = Math.max(tempMax, longestIncreasingPathAtCell(matrix, i, j+1, cache, matrix[i][j]));
            cache[i][j] = tempMax+1;
        }
        return cache[i][j];
    }
}
